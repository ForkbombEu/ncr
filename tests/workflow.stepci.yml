version: '1.1'
name: Status Check
env:
  host: localhost:3000
tests:
  hello:
    steps:
      - name: GET request
        http:
          url: http://${{env.host}}/hello
          method: GET
          check:
            status: 200
            json:
              output:
                - hello

  notfound:
    steps:
      - name: GET request
        http:
          url: http://${{env.host}}/notfound
          method: GET
          check:
            status: 404
            body: <html><body><h1>File Not Found</h1><hr><i>uWebSockets/20 Server</i></body></html>

  broken:
    steps:
      - name: GET request
        http:
          url: http://${{env.host}}
          method: GET
          check:
            status: /^20/
      - name: GET /broken
        http:
          url: http://${{env.host}}/broken
          method: GET
          check:
            status: 500
            sha256: 39cc1a02466e04790a69cc902bf13095b3058cb6b4d77937adf38e85a19cfe16

      - name: POST /broken no body
        http:
          url: http://${{env.host}}/broken
          method: POST
          headers:
            Content-Type: application/json
          json: {}
          check:
            status: 500
            sha256: 39cc1a02466e04790a69cc902bf13095b3058cb6b4d77937adf38e85a19cfe16

      - name: POST /broken no body
        http:
          url: http://${{env.host}}/broken
          method: POST
          headers:
            Content-Type: application/json
          json:
          check:
            status: 500
            body: Unexpected end of JSON input

  introspection-schema-validation:
    steps:
      - name: introspection no data
        http:
          url: http://${{env.host}}/valid-schema
          method: POST
          headers:
            Content-Type: application/json
          json: {}
          check:
            status: 422
            sha256: 7fbee1934646ca0ea2a64dbec1dfbfcf1e23d8c8016bda6914a120fad55b1721
            json:
              - eq:
                  - instancePath: ''
                    schemaPath: '#/required'
                    keyword: required
                    params:
                      missingProperty: love
                    message: must have required property 'love'

      - name: introspection invalid data
        http:
          url: http://${{env.host}}/valid-schema
          method: POST
          headers:
            Content-Type: application/json
          json:
            bad: 1
          check:
            status: 422
            sha256: 7fbee1934646ca0ea2a64dbec1dfbfcf1e23d8c8016bda6914a120fad55b1721
            json:
              - eq:
                  - instancePath: ''
                    schemaPath: '#/required'
                    keyword: required
                    params:
                      missingProperty: love
                    message: must have required property 'love'

      - name: introspection valid data
        http:
          url: http://${{env.host}}/valid-schema
          method: POST
          headers:
            Content-Type: application/json
          json:
            love: 'puria'
          check:
            status: 200
            json:
              love: puria

  json-schemas:
    steps:
      - name: json-schema invalid data
        http:
          url: http://${{env.host}}/brokenschema
          method: POST
          headers:
            Content-Type: application/json
          json:
            love:
              puria: 'puria'
          check:
            status: 422

      - name: json-schema valid but wrong data
        http:
          url: http://${{env.host}}/brokenschema
          method: POST
          headers:
            Content-Type: application/json
          json:
            love: 'puria'
          check:
            status: 422
            json:
              - eq:
                  - instancePath: ''
                    schemaPath: '#/required'
                    keyword: required
                    params:
                      missingProperty: male
                    message: must have required property 'male'

      - name: json-schema valid data
        http:
          url: http://${{env.host}}/brokenschema
          method: POST
          headers:
            Content-Type: application/json
          json:
            male: 'puria'
            sole: 'puria'
          check:
            status: 500
            json:
              - in: "[!] /zencode.lua:659: Zencode line 3: Given I have a 'string dictionary' named 'love'"

  slangroom_fs:
    steps:
      - name: slangroom invalid data
        http:
          url: http://${{env.host}}/chain
          method: POST
          headers:
            Content-Type: application/json
          json:
            love:
              puria: 'puria'
          check:
            status: 500

      - name: slangroom valid but ENV VAR not set
        http:
          url: http://${{env.host}}/chain
          method: POST
          headers:
            Content-Type: application/json
          json: {}
          check:
            status: 500
            body: $FILES_DIR must be provided

  my_keyring:
    steps:
      - name: my_keyring invalid data
        http:
          url: http://${{env.host}}/my-keyring
          method: POST
          headers:
            Content-Type: application/json
          json:
            love:
              puria: 'puria'
          check:
            status: 200


  meta:
    steps:
      - name: JUST POST has post 
        http:
          url: http://${{env.host}}/meta/just_post
          method: POST
          json: 
            name: "meta just post"
            age: 20
            description: "this is a test"
          check:
            status: 200
            json: 
              output:
                - JUST_POST
      - name: JUST POST 
        http:
          url: http://${{env.host}}/meta/just_post
          method: GET
          check:
            status: 404
      - name: GET request
        http:
          url: http://${{env.host}}/meta/content_type
          method: GET
          check:
            status: 200
            contentType: text/plain

      - name: GET status code
        http:
          url: http://${{env.host}}/meta/status_code
          method: GET
          check:
            status: 201
            json:
              output:
                - "mimmolo"

      - name: HIDDEN POST
        http:
          url: http://${{env.host}}/meta/hidden
          method: POST
          json: {}
          check:
            status: 404

      - name: HIDDEN RAW
        http:
          url: http://${{env.host}}/meta/hidden/raw
          method: GET
          check:
            status: 404

      - name: HIDDEN APP
        http:
          url: http://${{env.host}}/meta/hidden/app
          method: GET
          check:
            status: 404

      - name: HIDDEN GET
        http:
          url: http://${{env.host}}/meta/hidden
          method: GET
          check:
            status: 404

      - name: pass http headers
        http:
          url: http://${{env.host}}/meta/http_headers
          method: POST
          json: {}
          headers:
            Content-Type: application/json
          check:
            status: 200
            json:
              Content-Type: application/json
