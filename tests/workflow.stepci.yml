version: '1.1'
name: Status Check
env:
  host: localhost:3000
tests:
  headers:
    steps:
      - name: pass http headers with POST
        http:
          url: http://${{env.host}}/meta/http_headers
          method: POST
          json: {}
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json
              Cache-Control: no-store
            json:
              content-type: application/json
      - name: pass http headers with GET
        http:
          url: http://${{env.host}}/meta/http_headers
          method: GET
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json
              Cache-Control: no-store
            json:
              content-type: application/json
      - name: no http header in input and output
        http:
          url: http://${{env.host}}/meta/http_headers_metadata_without_headers
          method: POST
          json: {}
          check:
            status: 200
            json:
              result:
                msg: no_headers
      - name: searching for header with http_headers metadata set to false
        http:
          url: http://${{env.host}}/meta/get_http_headers_and_print
          method: POST
          json: {}
          check:
            status: 422
            json:
              - eq:
                - instancePath: ''
                  schemaPath: '#/required'
                  keyword: required
                  params:
                    missingProperty: http_headers
                  message: must have required property 'http_headers'
      - name: print http_headers with http_headers metadata set to false
        http:
          url: http://${{env.host}}/meta/create_http_headers_and_print
          method: POST
          json: {}
          check:
            status: 200
            json:
              http_headers:
                response:
                  Cache-Control: no-store

  hello:
    steps:
      - name: GET request
        http:
          url: http://${{env.host}}/hello
          method: GET
          check:
            status: 200
            json:
              output:
                - hello

  notfound:
    steps:
      - name: GET request
        http:
          url: http://${{env.host}}/notfound
          method: GET
          check:
            status: 404
            body: Not found

  broken:
    steps:
      - name: GET request
        http:
          url: http://${{env.host}}
          method: GET
          check:
            status: /^20/
      - name: GET /broken
        http:
          url: http://${{env.host}}/broken
          method: GET
          check:
            status: 500
            sha256: 42bacb6ec40ab9e524ede7f0bc3cef480ea407a5482fb71ba1fd04549fda4b29

      - name: POST /broken no body
        http:
          url: http://${{env.host}}/broken
          method: POST
          headers:
            Content-Type: application/json
          json: {}
          check:
            status: 500
            sha256: 42bacb6ec40ab9e524ede7f0bc3cef480ea407a5482fb71ba1fd04549fda4b29

      - name: POST /broken no body
        http:
          url: http://${{env.host}}/broken
          method: POST
          headers:
            Content-Type: application/json
          json:
          check:
            status: 500
            body: Unexpected end of JSON input

  introspection-schema-validation:
    steps:
      - name: introspection no data
        http:
          url: http://${{env.host}}/valid-schema
          method: POST
          headers:
            Content-Type: application/json
          json: {}
          check:
            status: 422
            sha256: 7fbee1934646ca0ea2a64dbec1dfbfcf1e23d8c8016bda6914a120fad55b1721
            json:
              - eq:
                  - instancePath: ''
                    schemaPath: '#/required'
                    keyword: required
                    params:
                      missingProperty: love
                    message: must have required property 'love'

      - name: introspection invalid data
        http:
          url: http://${{env.host}}/valid-schema
          method: POST
          headers:
            Content-Type: application/json
          json:
            bad: 1
          check:
            status: 422
            sha256: 7fbee1934646ca0ea2a64dbec1dfbfcf1e23d8c8016bda6914a120fad55b1721
            json:
              - eq:
                  - instancePath: ''
                    schemaPath: '#/required'
                    keyword: required
                    params:
                      missingProperty: love
                    message: must have required property 'love'

      - name: introspection valid data
        http:
          url: http://${{env.host}}/valid-schema
          method: POST
          headers:
            Content-Type: application/json
          json:
            love: 'puria'
          check:
            status: 200
            json:
              love: puria

  json-schemas:
    steps:
      - name: json-schema invalid data
        http:
          url: http://${{env.host}}/brokenschema
          method: POST
          headers:
            Content-Type: application/json
          json:
            love:
              puria: 'puria'
          check:
            status: 422

      - name: json-schema valid but wrong data
        http:
          url: http://${{env.host}}/brokenschema
          method: POST
          headers:
            Content-Type: application/json
          json:
            love: 'puria'
          check:
            status: 422
            json:
              - eq:
                  - instancePath: ''
                    schemaPath: '#/required'
                    keyword: required
                    params:
                      missingProperty: male
                    message: must have required property 'male'

      - name: json-schema valid data
        http:
          url: http://${{env.host}}/brokenschema
          method: POST
          headers:
            Content-Type: application/json
          json:
            male: 'puria'
            sole: 'puria'
          check:
            status: 500
            json:
              - in: "[!] /zencode.lua:706: Zencode line 3: Given I have a 'string dictionary' named 'love'"

  slangroom_fs:
    steps:
      - name: slangroom invalid data
        http:
          url: http://${{env.host}}/chain
          method: POST
          headers:
            Content-Type: application/json
          json:
            love:
              puria: 'puria'
          check:
            status: 500

#      - name: slangroom valid but ENV VAR not set
#        http:
#          url: http://${{env.host}}/chain
#          method: POST
#          headers:
#            Content-Type: application/json
#          json: {}
#          check:
#            status: 500
#            body: $FILES_DIR must be provided

  my_keyring:
    steps:
      - name: my_keyring invalid data
        http:
          url: http://${{env.host}}/my-keyring
          method: POST
          headers:
            Content-Type: application/json
          json:
            love:
              puria: 'puria'
          check:
            status: 200


  meta:
    steps:
      - name: JUST POST has post 
        http:
          url: http://${{env.host}}/meta/just_post
          method: POST
          json: 
            name: "meta just post"
            age: 20
            description: "this is a test"
          check:
            status: 200
            json: 
              output:
                - JUST_POST
      - name: JUST POST 
        http:
          url: http://${{env.host}}/meta/just_post
          method: GET
          check:
            status: 404
      - name: GET request
        http:
          url: http://${{env.host}}/meta/content_type
          method: GET
          check:
            status: 200
            contentType: text/plain

      - name: GET status code
        http:
          url: http://${{env.host}}/meta/status_code
          method: GET
          check:
            status: 201
            json:
              output:
                - "mimmolo"

      - name: HIDDEN POST
        http:
          url: http://${{env.host}}/meta/hidden
          method: POST
          json: {}
          check:
            status: 404

      - name: HIDDEN RAW
        http:
          url: http://${{env.host}}/meta/hidden/raw
          method: GET
          check:
            status: 404

      - name: HIDDEN APP
        http:
          url: http://${{env.host}}/meta/hidden/app
          method: GET
          check:
            status: 404

      - name: HIDDEN GET
        http:
          url: http://${{env.host}}/meta/hidden
          method: GET
          check:
            status: 404

      - name: precondition
        http:
          url: http://${{env.host}}/meta/after_precondition
          method: POST
          json:
            hello: world
          headers:
            test: precondition
          check:
            status: 200
            json:
              hello: world

      - name: precondition fails on change in data
        http:
          url: http://${{env.host}}/meta/after_precondition
          method: POST
          json:
            hello: world!
          headers:
            test: precondition
          check:
            status: 403

      - name: precondition fails on change in headers
        http:
          url: http://${{env.host}}/meta/after_precondition
          method: POST
          json:
            hello: world
          headers:
            test: precondition_fails
          check:
            status: 403
  chain:
    steps:
      - name: hello chain
        http:
          url: http://${{env.host}}/chain/hello
          method: GET
          check:
            status: 200
            json:
              say_hi: hello from dataTransform

      - name: hello chain with input GET
        http:
          url: http://${{env.host}}/chain/hello_with_input?say_hi=bonjour
          method: GET
          check:
            status: 200
            json:
              say_hi: bonjour

      - name: hello chain with input POST
        http:
          url: http://${{env.host}}/chain/hello_with_input
          method: POST
          json:
            say_hi: Buen día
          check:
            status: 200
            json:
              say_hi: Buen día

  public_dir:
    steps:
      - name: public with wrong precondition
        http:
          url: http://${{env.host}}/hello_world?query_param=wrong_param
          method: GET
          check:
            status: 403
      - name: public with right precondition
        http:
          url: http://${{env.host}}/hello_world?query_param=hello
          method: GET
          check:
            status: 200
            selctors:
              title: Benvenuto
              body: Hello World!
            headers:
              Content-Type: text/html
      - name: unreachable file since its basename start with a dot
        http:
          url: http://${{env.host}}/.test.txt
          method: GET
          check:
            status: 404
      - name: reachable file since its filepath start with a dot, but not its basename
        http:
          url: http://${{env.host}}/.test/test.txt
          method: GET
          check:
            status: 200
            body: This should be reachable!