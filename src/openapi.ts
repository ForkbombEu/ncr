// SPDX-FileCopyrightText: 2024 The Forkbomb Company
//
// SPDX-License-Identifier: AGPL-3.0-or-later

import { Type } from '@sinclair/typebox';
import { OpenAPIV3_1 } from 'openapi-types';
import p from '../package.json' with { type: 'json' };
import { JSONSchema, Metadata } from './types.js';

export function generateRawPath(): OpenAPIV3_1.PathItemObject {
	return {
		get: {
			tags: ['ðŸ“œ Raw contracts'],
			responses: {
				'200': {
					description: 'Succesful response will output the zencode verbatim contract',
					content: { 'text/plain': { schema: Type.String() } }
				}
			}
		}
	};
}

export function generateAppletPath(): OpenAPIV3_1.PathItemObject {
	return {
		get: {
			tags: ['ðŸ“± Generated applets'],
			responses: {
				'200': {
					description: 'Generated applet on the fly based on the contract introspection',
					content: { 'text/html': { schema: Type.String() } }
				}
			}
		}
	};
}

export function generatePath(contract: string, schema: JSONSchema, metadata: Metadata): OpenAPIV3_1.PathItemObject {
	const getParams = schema.required?.map((n: string) => {
		return {
			name: n,
			in: 'query',
			description: `The ${n}`,
			required: true,
			schema: { type: 'string' }
		} as OpenAPIV3_1.ParameterObject;
	});

	const responses = {
		[metadata.successCode as string]: {
			description: metadata.successDescription as string,
			content: {
				[metadata.contentType as string]: {
					schema: Type.Object({
						output: Type.Array(Type.String())
					})
				}
			}
		},
		[metadata.errorCode as string]: {
			description: metadata.errorDescription as string,
			content: { [metadata.contentType as string]: { schema: Type.Array(Type.String()) } }
		}
	}

	let result = {} as OpenAPIV3_1.PathItemObject;

	if (!metadata.disablePost) {
		result['post'] = {
			description: contract.replaceAll('\n', '\n\n'),
			tags: metadata.tags,
			requestBody: {
				content: {
					[metadata.contentType]: {
						schema: schema,
						examples: metadata.examples
					}
				}
			},
			responses: responses
		};
	}

	if (!metadata.disableGet) {
		result['get'] = {
			description: contract.replaceAll('\n', '\n\n'),
			tags: metadata.tags,
			parameters: getParams,
			responses: responses
	};
}

	return result;


}

export const definition: Partial<OpenAPIV3_1.Document> = {
	openapi: '3.1.0',
	paths: {},
	info: {
		title: 'noË‘codeË‘room',
		version: p.version,
		description: `## Restful api from zencode smart contracts with no code!

This is a simple API autogenerated from a folder within your server.

To add new endpoints you should add new zencode contracts in the directory.

**NB** The files should be in form of \`endpoint.zen\` then your contract will run on \`/endpoint\``,
		termsOfService: 'https://forkbomb.solutions/privacy-policy/',
		contact: {
			email: 'info@forkbomb.eu',
			name: 'Forkbomb BV',
			url: 'https://forkbomb.solutions'
		},
		license: {
			name: 'GNU Affero General Public License v3.0 or later',
			url: 'https://www.gnu.org/licenses/agpl-3.0'
		}
	},
	tags: [
		{
			name: 'ðŸ“‘ Zencodes',
			description: 'Endpoints generated over the zencode smart contracts'
		},
		{
			name: 'ðŸ“± Generated applets',
			description: 'The generated UI app of your contracts introspection'
		},
		{
			name: 'ðŸ“œ Raw contracts',
			description: 'Sometimes you just need to see the contract you are executing'
		}
	]
};

export const openapiTemplate = `
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="description" content="SwaggerUI" />
		<title>noË‘codeË‘room documentation</title>
		<link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@latest/swagger-ui.css" />
		<style>
			.swagger-ui h1:before {
				content: '# ';
			}
			.swagger-ui h1 {
				font-size: 14px;
				margin: 0 0;
				font-style: italic;
				color: #888;
				font-weight: 100;
			}
			.swagger-ui .renderedMarkdown p {
				margin: 10px 0px;
				font-weight: 600;
			}
		</style>
	</head>
	<body>
		<div id="swagger-ui"></div>
		<script src="https://unpkg.com/swagger-ui-dist@latest/swagger-ui-bundle.js" crossorigin></script>
		<script>
			window.onload = async () => {
				window.ui = SwaggerUIBundle({
					url: '/oas.json',
					dom_id: '#swagger-ui'
				});
			};
		</script>
	</body>
</html>
`;
