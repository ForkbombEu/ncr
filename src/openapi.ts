// SPDX-FileCopyrightText: 2024 The Forkbomb Company
//
// SPDX-License-Identifier: AGPL-3.0-or-later

import { Type } from '@sinclair/typebox';
import { OpenAPIV3_1 } from 'openapi-types';
import p from '../package.json' with { type: 'json' };
import { JSONSchema, Metadata } from './types.js';
import { config } from './cli.js';
import { readFileSync } from 'fs';

export const defaultTagsName = {
	zen: 'ðŸ“‘ Zencode APIs',
	applet: 'ðŸ“± Zencode applets',
	raw: 'ðŸ“œ Zencode (raw scripts)'
};

export function generateRawPath(): OpenAPIV3_1.PathItemObject {
	return {
		get: {
			tags: [defaultTagsName.raw],
			responses: {
				'200': {
					description: 'Succesful response will output the zencode verbatim contract',
					content: { 'text/plain': { schema: Type.String() } }
				}
			}
		}
	};
}

export function generateAppletPath(appletUrl: string): OpenAPIV3_1.PathItemObject {
	return {
		get: {
			tags: [defaultTagsName.applet],
			responses: {
				'200': {
					description: `[ðŸ‘‰ Click here to open the applet](${appletUrl})`,
					content: { 'text/html': { schema: Type.String() } }
				}
			}
		}
	};
}

export function generatePath(
	contract: string,
	schema: JSONSchema,
	metadata: Metadata,
	keys?: JSON
): OpenAPIV3_1.PathItemObject {
	const getParams = schema.required?.map((n: string) => {
		return {
			name: n,
			in: 'query',
			description: `The ${n}`,
			required: true,
			schema: { type: 'string' }
		} as OpenAPIV3_1.ParameterObject;
	});

	const responses = {
		[metadata.successCode as string]: {
			description: metadata.successDescription as string,
			content: {
				[metadata.contentType as string]: {
					schema: Type.Object({
						output: Type.Array(Type.String())
					})
				}
			}
		},
		[metadata.errorCode as string]: {
			description: metadata.errorDescription as string,
			content: { [metadata.contentType as string]: { schema: Type.Array(Type.String()) } }
		}
	};

	const result = {} as (OpenAPIV3_1.PathItemObject & { post: { keys?: string }} & { get: { keys?: string }});

	if (!metadata.disablePost) {
		result['post'] = {
			description: contract,
			tags: metadata.tags,
			requestBody: {
				content: {
					[metadata.contentType]: {
						schema: schema,
						examples: metadata.examples
					}
				}
			},
			responses: responses
		};
		if (keys && config.dev) result['post'].keys = JSON.stringify(keys);
	}

	if (!metadata.disableGet) {
		result['get'] = {
			description: contract,
			tags: metadata.tags,
			parameters: getParams,
			responses: responses
		};
		if (keys && config.dev) result['get'].keys = JSON.stringify(keys);
	}

	return result;
}

export const defaultTags = [
	{
		name: defaultTagsName.zen,
		description: 'Endpoints generated over the zencode smart contracts'
	},
	{
		name: defaultTagsName.applet,
		description: 'The generated UI app of your contracts introspection'
	},
	{
		name: defaultTagsName.raw,
		description: 'Sometimes you just need to see the contract you are executing'
	}
];

const openapiInfo = {
	title: 'noË‘codeË‘room',
	version: p.version,
	description: `## Restful api from zencode smart contracts with no code!

This is a simple API autogenerated from a folder within your server.

To add new endpoints you should add new zencode contracts in the directory.

**NB** The files should be in form of \`endpoint.zen\` then your contract will run on \`/endpoint\``,
	termsOfService: 'https://forkbomb.solutions/privacy-policy/',
	contact: {
		email: 'info@forkbomb.eu',
		name: 'Forkbomb BV',
		url: 'https://forkbomb.solutions'
	},
	license: {
		name: 'GNU Affero General Public License v3.0 or later',
		url: 'https://www.gnu.org/licenses/agpl-3.0'
	}
};

function getOpenapiInfo(): OpenAPIV3_1.InfoObject {
	try {
		const content = readFileSync(config.openapiInfo, 'utf-8');
		return Object.assign({}, openapiInfo, JSON.parse(content));
	} catch {
		return openapiInfo;
	}
}

export const definition: Partial<OpenAPIV3_1.Document> = {
	openapi: '3.1.0',
	paths: {},
	info: getOpenapiInfo(),
	tags: []
};

const openapiCss = `
<style>
	.HttpOperation__Description h1:before {
		content: "#";
	}
	.HttpOperation__Description h1 {
		font-size: 16px;
		margin: 0 0;
		font-style: italic;
		color: #444;
		font-weight: 100;
	}
	.HttpOperation__Description p {
		white-space: pre-line;
	}
</style>
`;

export const openapiTemplate = `
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<title>noË‘codeË‘room documentation</title>
		<script src="https://unpkg.com/@stoplight/elements/web-components.min.js"></script>
		<link rel="stylesheet" href="https://unpkg.com/@stoplight/elements/styles.min.css">
		${openapiCss}
	</head>
	<body>
		<elements-api layout="sidebar" router="hash" apiDescriptionUrl="${config.basepath}/oas.json" />
	</body>
</html>
`;
